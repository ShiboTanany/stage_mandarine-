buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
        classpath('io.spring.gradle:dependency-management-plugin:0.5.5.RELEASE')
        classpath('net.sf.proguard:proguard-gradle:5.2.1')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'maven'

def serviceName = "VO-Wifi-Activation-Service"
def serviceVersion = "1.0"

jar {
    baseName = serviceName
    version = serviceVersion
}

repositories {
    mavenCentral()
    mavenLocal()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    jaxb
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'org.springframework.boot:spring-boot-actuator'
    compile("org.springframework.boot:spring-boot-starter-ws")
    compile("org.springframework.boot:spring-boot-devtools")
    //spring security
    //compile("org.springframework.boot:spring-boot-starter-security")
	
    testCompile("org.springframework.boot:spring-boot-starter-test")
	
    compile 'org.flywaydb:flyway-core:3.2.1'        
    compile 'org.slf4j:jcl-over-slf4j:1.7.12'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'commons-io:commons-io:2.4'
    
    compile ('com.mysema.querydsl:querydsl-jpa:3.7.0'){
    	exclude(module: 'slf4j-api')
        exclude(module: 'slf4j-log4j12')
    }
    compile('io.swagger:swagger-jersey2-jaxrs:1.5.6')
    compile 'io.springfox:springfox-swagger2:2.3.1'
    compile 'io.springfox:springfox-swagger-ui:2.3.1'
    compile 'com.mysema.querydsl:querydsl-apt:3.7.0:jpa'
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile 'io.dropwizard.metrics:metrics-core:3.1.2'
    compile 'io.dropwizard.metrics:metrics-servlet:3.1.2'
    compile 'me.geso:nanobench:0.2.1'

    compile("wsdl4j:wsdl4j:1.6.1")
    jaxb("com.sun.xml.bind:jaxb-xjc:2.2.4-1")
    //compile(files(genJaxb.classesDir).builtBy(genJaxb))
    //SHAABAN

   compile files ('/media/shibo/Shibo/ojdbc6.jar')

   


    compile group: 'oracle', name: 'ojdbc6', version: '11.2.0.3'
    //SHAABAN
    compile("org.springframework.boot:spring-boot-starter-data-jpa:1.4.1.RELEASE")

    // http://mvnrepository.com/artifact/net.bull.javamelody/javamelody-core
    compile 'net.bull.javamelody:javamelody-core:1.59.0'
    // https://mvnrepository.com/artifact/com.lowagie/itext
    compile group: 'com.lowagie', name: 'itext', version: '2.1.7'
    //java mail and freemarker
    //compile('javax.mail:mail:1.4.7')
    //compile('org.freemarker:freemarker:2.3.23')

    //common lang for locale
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'

    
    // Blowfish
    //compile('com.mega.common.encryption:blowfishEncryption:1.2')
	
    //Oracle JDBC Driver
	
	
    // https://mvnrepository.com/artifact/org.hibernate/hibernate-c3p0
    compile group: 'org.hibernate', name: 'hibernate-c3p0', version: '5.2.9.Final'

    testCompile('com.mysema.querydsl:querydsl-jpa:3.7.0') {
        exclude(module: 'slf4j-api')
        exclude(module: 'slf4j-log4j12')
    }
    testCompile ('org.springframework:spring-test:4.1.6.RELEASE')
    testCompile ('org.dbunit:dbunit:2.5.1')
    testCompile ('com.github.springtestdbunit:spring-test-dbunit:1.2.1')
    testCompile ('com.h2database:h2:1.4.189')
    testCompile('org.hamcrest:hamcrest-all:1.3')

    compile("wsdl4j:wsdl4j:1.6.1")
    jaxb("com.sun.xml.bind:jaxb-xjc:2.2.4-1")
    
    compile ("org.hibernate:hibernate-envers")
    
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
	
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
	
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

// Query DSL Section
sourceSets {
    main
    test
    // used by the QueryDSL apt pre-compile step for apt output
    generated
}

// Task modifications to generate code using apt
def generatedSrcDir = "src/generated/java"
task createGeneratedSrcDir << {
    file(generatedSrcDir).mkdirs()
}
compileJava.dependsOn createGeneratedSrcDir

compileJava {
    options.compilerArgs << "-processor" << "com.mysema.query.apt.jpa.JPAAnnotationProcessor" << "-s" << file(generatedSrcDir).absolutePath
}

clean {
    delete fileTree(dir:generatedSrcDir,exclude: ".gitignore")
}


springBoot {
    mainClass = "com.ntgclarity.services.config.WebServiceConfig"
}
